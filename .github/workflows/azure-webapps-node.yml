<!DOCTYPE html>
<html lang="fr">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Gestion du Temps</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      margin: 0;
      padding: 20px;
      background: #f0f2f5;
      color: #333;
      transition: background 0.3s, color 0.3s;
    }
    body.dark-mode {
      background: #1e1e1e;
      color: #f0f0f0;
    }
    h1, h2, h3 { text-align: center; }
    #taskInput, #goalInput { width: 70%; padding: 10px; margin-bottom: 10px; }
    #addTask, #addGoal, #toggleDarkMode { padding: 10px 20px; margin-top: 10px; }
    ul { list-style: none; padding: 0; }
    li {
      background: white;
      margin: 5px 0;
      padding: 10px;
      border-radius: 5px;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }
    body.dark-mode li { background: #2a2a2a; }
    .delete { color: red; cursor: pointer; }
    .section {
      background: #fff;
      padding: 20px;
      margin: 20px auto;
      border-radius: 10px;
      max-width: 800px;
      box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    }
    body.dark-mode .section { background: #292929; box-shadow: none; }
    #calendar { display: flex; justify-content: center; margin-top: 10px; }
    input[type="date"] { padding: 10px; }
    #pomodoro { text-align: center; margin-top: 30px; }
    #timer { font-size: 2em; margin: 10px; }
    #progressBar {
      height: 20px;
      width: 100%;
      background: #ddd;
      border-radius: 10px;
      overflow: hidden;
      margin-top: 10px;
    }
    #progress {
      height: 100%;
      width: 0;
      background: #4caf50;
      transition: width 0.3s;
    }
  </style>
</head>
<body>
  <h1>üïí Mon Gestionnaire de Temps</h1>
  <div style="text-align: center">
    <button id="toggleDarkMode">üåì Mode Sombre</button>
  </div>

  <div class="section">
    <h2>üìã T√¢ches √† faire</h2>
    <input type="text" id="taskInput" placeholder="Ajouter une t√¢che...">
    <button id="addTask">Ajouter</button>
    <ul id="taskList"></ul>
    <div id="progressBar"><div id="progress"></div></div>
  </div>

  <div class="section">
    <h2>üìÜ Calendrier</h2>
    <div id="calendar">
      <input type="date" id="calendarInput">
    </div>
  </div>

  <div class="section">
    <h2>üéØ Objectifs</h2>
    <input type="text" id="goalInput" placeholder="Ajouter un objectif...">
    <button id="addGoal">Ajouter</button>
    <ul id="goalList"></ul>
  </div>

  <div class="section" id="pomodoro">
    <h2>üçÖ Pomodoro</h2>
    <div id="timer">25:00</div>
    <button onclick="startPomodoro()">D√©marrer</button>
    <button onclick="resetPomodoro()">R√©initialiser</button>
  </div>

  <script>
    const taskInput = document.getElementById("taskInput");
    const taskList = document.getElementById("taskList");
    const goalInput = document.getElementById("goalInput");
    const goalList = document.getElementById("goalList");
    const progress = document.getElementById("progress");

    function saveList(id, listElement) {
      const items = [];
      listElement.querySelectorAll("li").forEach(li => {
        items.push({
          text: li.querySelector("span").textContent,
          done: li.classList.contains("done")
        });
      });
      localStorage.setItem(id, JSON.stringify(items));
      updateProgress();
    }

    function loadList(id, listElement, deleteClass) {
      const items = JSON.parse(localStorage.getItem(id)) || [];
      items.forEach(item => addItemToList(listElement, item.text, id, deleteClass, item.done));
    }

    function addItemToList(listElement, text, storageKey, deleteClass, done = false) {
      const li = document.createElement("li");
      const span = document.createElement("span");
      span.textContent = text;
      const del = document.createElement("span");
      del.textContent = "‚ùå";
      del.className = deleteClass;
      del.onclick = () => { li.remove(); saveList(storageKey, listElement); };
      span.onclick = () => {
        li.classList.toggle("done");
        saveList(storageKey, listElement);
      };
      li.appendChild(span);
      li.appendChild(del);
      if (done) li.classList.add("done");
      listElement.appendChild(li);
      saveList(storageKey, listElement);
    }

    document.getElementById("addTask").onclick = () => {
      if (taskInput.value.trim() !== "") {
        addItemToList(taskList, taskInput.value, "tasks", "delete");
        taskInput.value = "";
      }
    };

    document.getElementById("addGoal").onclick = () => {
      if (goalInput.value.trim() !== "") {
        addItemToList(goalList, goalInput.value, "goals", "delete");
        goalInput.value = "";
      }
    };

    // Pomodoro Timer
    let pomodoroTime = 25 * 60;
    let pomodoroInterval;
    const timerDisplay = document.getElementById("timer");

    function updateTimer() {
      let min = Math.floor(pomodoroTime / 60);
      let sec = pomodoroTime % 60;
      timerDisplay.textContent = `${String(min).padStart(2, '0')}:${String(sec).padStart(2, '0')}`;
    }

    function startPomodoro() {
      clearInterval(pomodoroInterval);
      pomodoroInterval = setInterval(() => {
        if (pomodoroTime > 0) {
          pomodoroTime--;
          updateTimer();
        } else {
          clearInterval(pomodoroInterval);
          alert("Temps √©coul√© ! Prends une pause.");
        }
      }, 1000);
    }

    function resetPomodoro() {
      clearInterval(pomodoroInterval);
      pomodoroTime = 25 * 60;
      updateTimer();
    }

    function updateProgress() {
      const tasks = taskList.querySelectorAll("li");
      const done = [...tasks].filter(li => li.classList.contains("done"));
      const percentage = tasks.length ? (done.length / tasks.length) * 100 : 0;
      progress.style.width = `${percentage}%`;
    }

    // Mode sombre
    const toggleDarkMode = document.getElementById("toggleDarkMode");
    toggleDarkMode.onclick = () => {
      document.body.classList.toggle("dark-mode");
      localStorage.setItem("darkMode", document.body.classList.contains("dark-mode"));
    };

    // Initialisation
    if (localStorage.getItem("darkMode") === "true") {
      document.body.classList.add("dark-mode");
    }
    loadList("tasks", taskList, "delete");
    loadList("goals", goalList, "delete");
    updateTimer();
    updateProgress();
  </script>
</body>
</html>
